{"version":3,"sources":["../../src/utilities/readDirectory.js"],"names":["hasIndex","directoryPath","indexPath","resolve","statSync","error","hasNoExtension","fileName","matches","match","hasMultipleExtensions","length","removeDuplicates","files","filter","includes","options","children","silent","readdirSync","absolutePath","isDirectory","startsWith","sort"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,MAAMA,WAAYC,aAAD,IAAmB;AAClC,QAAMC,YAAY,eAAKC,OAAL,CAAaF,aAAb,EAA4B,UAA5B,CAAlB;;AAEA,MAAI;AACF,iBAAGG,QAAH,CAAYF,SAAZ;;AAEA,WAAO,IAAP;AACD,GAJD,CAIE,OAAOG,KAAP,EAAc;AACd,WAAO,KAAP;AACD;AACF,CAVD;;AAYA,MAAMC,iBAAkBC,QAAD,IAAc;AACnC,QAAMC,UAAUD,SAASE,KAAT,CAAe,KAAf,CAAhB;;AAEA,SAAO,CAACD,OAAR;AACD,CAJD;;AAMA,MAAME,wBAAyBH,QAAD,IAAc;AAC1C,QAAMC,UAAUD,SAASE,KAAT,CAAe,KAAf,CAAhB;;AAEA,SAAOD,WAAWA,QAAQG,MAAR,GAAiB,CAAnC;AACD,CAJD;;AAMA;AACA;AACA;;AAEA,MAAMC,mBAAoBC,KAAD,IAAW;AAClC,SAAO,iBAAEC,MAAF,CAASD,KAAT,EAAiBN,QAAD,IAAc;AACnC,WAAO,CAAC,iBAAEQ,QAAF,CAAWF,KAAX,EAAkBN,WAAW,KAA7B,CAAR;AACD,GAFM,CAAP;AAGD,CAJD;;kBAMe,UAACN,aAAD,EAAiC;AAAA,MAAjBe,OAAiB,uEAAP,EAAO;;AAC9C,MAAIC,QAAJ;;AAEA,MAAI,CAAC,uCAAwBhB,aAAxB,EAAuC,EAACiB,QAAQF,QAAQE,MAAjB,EAAvC,CAAL,EAAuE;AACrE,WAAO,KAAP;AACD;;AAEDD,aAAW,aAAGE,WAAH,CAAelB,aAAf,CAAX;;AAEAgB,aAAW,iBAAEH,MAAF,CAASG,QAAT,EAAoBV,QAAD,IAAc;AAC1C,UAAMa,eAAe,eAAKjB,OAAL,CAAaF,aAAb,EAA4BM,QAA5B,CAArB;AACA,UAAMc,cAAc,aAAGjB,QAAH,CAAYgB,YAAZ,EAA0BC,WAA1B,EAApB;;AAEJ;AACA;AACA;;AAEI,QAAIf,eAAeC,QAAf,KAA4B,CAACc,WAAjC,EAA8C;AAC5C,aAAO,KAAP;AACD;;AAED,QAAIX,sBAAsBH,QAAtB,CAAJ,EAAqC;AACnC,aAAO,KAAP;AACD;;AAED,QAAI,iBAAEe,UAAF,CAAaf,QAAb,EAAuB,UAAvB,CAAJ,EAAwC;AACtC,aAAO,KAAP;AACD;;AAEL;AACA;AACA;;AAEI,QAAIc,eAAe,CAACrB,SAASoB,YAAT,CAApB,EAA4C;AAC1C,aAAO,KAAP;AACD;;AAED,WAAO,IAAP;AACD,GA7BU,CAAX;;AA+BAH,aAAWL,iBAAiBK,QAAjB,CAAX;;AAEA,SAAOA,SAASM,IAAT,EAAP;AACD,C","file":"readDirectory.js","sourcesContent":["import fs from 'fs';\nimport path from 'path';\nimport _ from 'lodash';\nimport validateTargetDirectory from './validateTargetDirectory';\n\nconst hasIndex = (directoryPath) => {\n  const indexPath = path.resolve(directoryPath, 'index.js');\n\n  try {\n    fs.statSync(indexPath);\n\n    return true;\n  } catch (error) {\n    return false;\n  }\n};\n\nconst hasNoExtension = (fileName) => {\n  const matches = fileName.match(/\\./g);\n\n  return !matches;\n};\n\nconst hasMultipleExtensions = (fileName) => {\n  const matches = fileName.match(/\\./g);\n\n  return matches && matches.length > 1;\n};\n\n// const isSafeName = (fileName) => {\n//   return /^[a-z][a-z0-9._]+$/i.test(fileName);\n// };\n\nconst removeDuplicates = (files) => {\n  return _.filter(files, (fileName) => {\n    return !_.includes(files, fileName + '.js');\n  });\n};\n\nexport default (directoryPath, options = {}) => {\n  let children;\n\n  if (!validateTargetDirectory(directoryPath, {silent: options.silent})) {\n    return false;\n  }\n\n  children = fs.readdirSync(directoryPath);\n\n  children = _.filter(children, (fileName) => {\n    const absolutePath = path.resolve(directoryPath, fileName);\n    const isDirectory = fs.statSync(absolutePath).isDirectory();\n\n//     if (!isSafeName(fileName)) {\n//       return false;\n//     }\n\n    if (hasNoExtension(fileName) && !isDirectory) {\n      return false;\n    }\n\n    if (hasMultipleExtensions(fileName)) {\n      return false;\n    }\n\n    if (_.startsWith(fileName, 'index.js')) {\n      return false;\n    }\n\n//     if (!isDirectory && !_.endsWith(fileName, '.js')) {\n//       return false;\n//     }\n\n    if (isDirectory && !hasIndex(absolutePath)) {\n      return false;\n    }\n\n    return true;\n  });\n\n  children = removeDuplicates(children);\n\n  return children.sort();\n};\n"]}